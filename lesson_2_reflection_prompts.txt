What happens when you initialize a repository? Why do you need to do it?
A: 
When we initialize the repository there aren´t no commit created by  default. W use de "git init" to initialize a repo and "git status" to  see the state of a repo. We need to to this to use git as our vcs

How is the staging area different from the working directory and the repository?
What value do you think it offers?

A:
working directory is where the files are at initial point.
Staging area is a intermediated area where we can put files that are candidtes to make part of our repo.
Repository is a database from where we will track all the file

How can you use the staging area to make sure you have one commit per logical change?
A:
As an intermediate are we use the "git add file" to put the file in staging area. Once there we will just commit file(s) that we´re sure satisfy the general rule "one commit per logical change "

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A:
When we want to make experimentation, try solo version of the project etc. Branches helps in such a way that we can accomplish experimentation.
How do the diagrams help you visualize the branch structure?
A:
We can see the structure of our repositore the reachable and unreachable commits. Also we can see the branchs that do not make parte of the linear structure. 
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A:
The result we join two different branchs making one branch. Was represented in that way to help us understand the design. From where one branch was created and where it was joined to other.

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
Pros: 
      1. It make all the work for us.
      2. Saving time

Cons:
     1. When there is conflit it´s leave in our own
     2. It take some time to revise the conflited code
     3. Make a new commit and then merge       

